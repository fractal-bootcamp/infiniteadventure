// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./generated/zod" // default is ./generated/zod
  useMultipleFiles                 = false // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PixelDex {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  type        String
  description String
  frontImg    String?
  backImg     String?

  // base stats
  hp      Int
  attack  Int
  defense Int
  speed   Int

  // relationships
  moves    Move[]
  pixelman Pixelman[]
}

model Move {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  type        String
  power       Int
  accuracy    Int

  // relationships 
  pixelDex   PixelDex @relation(fields: [pixelDexId], references: [id])
  pixelDexId String
}

model Pixelman {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  pixelDex   PixelDex @relation(fields: [pixelDexId], references: [id])
  pixelDexId String
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  secret    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Battle {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  battle    Json
}